.include "macros.inc"

.section .text, "ax"
.global OSInitMutex
OSInitMutex:
/* 800F2B44 000EDA44  94 21 FF F0 */	stwu r1, -0x10(r1)
/* 800F2B48 000EDA48  7C 08 02 A6 */	mflr r0
/* 800F2B4C 000EDA4C  90 01 00 14 */	stw r0, 0x14(r1)
/* 800F2B50 000EDA50  93 E1 00 0C */	stw r31, 0xc(r1)
/* 800F2B54 000EDA54  7C 7F 1B 78 */	mr r31, r3
/* 800F2B58 000EDA58  48 00 15 F1 */	bl OSInitThreadQueue
/* 800F2B5C 000EDA5C  38 00 00 00 */	li r0, 0
/* 800F2B60 000EDA60  90 1F 00 08 */	stw r0, 8(r31)
/* 800F2B64 000EDA64  90 1F 00 0C */	stw r0, 0xc(r31)
/* 800F2B68 000EDA68  83 E1 00 0C */	lwz r31, 0xc(r1)
/* 800F2B6C 000EDA6C  80 01 00 14 */	lwz r0, 0x14(r1)
/* 800F2B70 000EDA70  7C 08 03 A6 */	mtlr r0
/* 800F2B74 000EDA74  38 21 00 10 */	addi r1, r1, 0x10
/* 800F2B78 000EDA78  4E 80 00 20 */	blr 

.global OSLockMutex
OSLockMutex:
/* 800F2B7C 000EDA7C  94 21 FF E0 */	stwu r1, -0x20(r1)
/* 800F2B80 000EDA80  7C 08 02 A6 */	mflr r0
/* 800F2B84 000EDA84  90 01 00 24 */	stw r0, 0x24(r1)
/* 800F2B88 000EDA88  93 E1 00 1C */	stw r31, 0x1c(r1)
/* 800F2B8C 000EDA8C  93 C1 00 18 */	stw r30, 0x18(r1)
/* 800F2B90 000EDA90  93 A1 00 14 */	stw r29, 0x14(r1)
/* 800F2B94 000EDA94  93 81 00 10 */	stw r28, 0x10(r1)
/* 800F2B98 000EDA98  7C 7C 1B 78 */	mr r28, r3
/* 800F2B9C 000EDA9C  4B FF ED 25 */	bl OSDisableInterrupts
/* 800F2BA0 000EDAA0  7C 7D 1B 78 */	mr r29, r3
/* 800F2BA4 000EDAA4  48 00 15 B5 */	bl OSGetCurrentThread
/* 800F2BA8 000EDAA8  7C 7E 1B 78 */	mr r30, r3
/* 800F2BAC 000EDAAC  3B E0 00 00 */	li r31, 0
lbl_800F2BB0:
/* 800F2BB0 000EDAB0  80 1C 00 08 */	lwz r0, 8(r28)
/* 800F2BB4 000EDAB4  2C 00 00 00 */	cmpwi r0, 0
/* 800F2BB8 000EDAB8  40 82 00 40 */	bne lbl_800F2BF8
/* 800F2BBC 000EDABC  80 7C 00 0C */	lwz r3, 0xc(r28)
/* 800F2BC0 000EDAC0  93 DC 00 08 */	stw r30, 8(r28)
/* 800F2BC4 000EDAC4  38 03 00 01 */	addi r0, r3, 1
/* 800F2BC8 000EDAC8  90 1C 00 0C */	stw r0, 0xc(r28)
/* 800F2BCC 000EDACC  80 7E 02 F8 */	lwz r3, 0x2f8(r30)
/* 800F2BD0 000EDAD0  2C 03 00 00 */	cmpwi r3, 0
/* 800F2BD4 000EDAD4  40 82 00 0C */	bne lbl_800F2BE0
/* 800F2BD8 000EDAD8  93 9E 02 F4 */	stw r28, 0x2f4(r30)
/* 800F2BDC 000EDADC  48 00 00 08 */	b lbl_800F2BE4
lbl_800F2BE0:
/* 800F2BE0 000EDAE0  93 83 00 10 */	stw r28, 0x10(r3)
lbl_800F2BE4:
/* 800F2BE4 000EDAE4  38 00 00 00 */	li r0, 0
/* 800F2BE8 000EDAE8  90 7C 00 14 */	stw r3, 0x14(r28)
/* 800F2BEC 000EDAEC  90 1C 00 10 */	stw r0, 0x10(r28)
/* 800F2BF0 000EDAF0  93 9E 02 F8 */	stw r28, 0x2f8(r30)
/* 800F2BF4 000EDAF4  48 00 00 3C */	b lbl_800F2C30
lbl_800F2BF8:
/* 800F2BF8 000EDAF8  7C 00 F0 40 */	cmplw r0, r30
/* 800F2BFC 000EDAFC  40 82 00 14 */	bne lbl_800F2C10
/* 800F2C00 000EDB00  80 7C 00 0C */	lwz r3, 0xc(r28)
/* 800F2C04 000EDB04  38 03 00 01 */	addi r0, r3, 1
/* 800F2C08 000EDB08  90 1C 00 0C */	stw r0, 0xc(r28)
/* 800F2C0C 000EDB0C  48 00 00 24 */	b lbl_800F2C30
lbl_800F2C10:
/* 800F2C10 000EDB10  93 9E 02 F0 */	stw r28, 0x2f0(r30)
/* 800F2C14 000EDB14  80 7C 00 08 */	lwz r3, 8(r28)
/* 800F2C18 000EDB18  80 9E 02 D0 */	lwz r4, 0x2d0(r30)
/* 800F2C1C 000EDB1C  48 00 18 45 */	bl func_800F4460
/* 800F2C20 000EDB20  7F 83 E3 78 */	mr r3, r28
/* 800F2C24 000EDB24  48 00 26 3D */	bl OSSleepThread
/* 800F2C28 000EDB28  93 FE 02 F0 */	stw r31, 0x2f0(r30)
/* 800F2C2C 000EDB2C  4B FF FF 84 */	b lbl_800F2BB0
lbl_800F2C30:
/* 800F2C30 000EDB30  7F A3 EB 78 */	mr r3, r29
/* 800F2C34 000EDB34  4B FF EC B5 */	bl OSRestoreInterrupts
/* 800F2C38 000EDB38  80 01 00 24 */	lwz r0, 0x24(r1)
/* 800F2C3C 000EDB3C  83 E1 00 1C */	lwz r31, 0x1c(r1)
/* 800F2C40 000EDB40  83 C1 00 18 */	lwz r30, 0x18(r1)
/* 800F2C44 000EDB44  83 A1 00 14 */	lwz r29, 0x14(r1)
/* 800F2C48 000EDB48  83 81 00 10 */	lwz r28, 0x10(r1)
/* 800F2C4C 000EDB4C  7C 08 03 A6 */	mtlr r0
/* 800F2C50 000EDB50  38 21 00 20 */	addi r1, r1, 0x20
/* 800F2C54 000EDB54  4E 80 00 20 */	blr 

.global OSUnlockMutex
OSUnlockMutex:
/* 800F2C58 000EDB58  94 21 FF E0 */	stwu r1, -0x20(r1)
/* 800F2C5C 000EDB5C  7C 08 02 A6 */	mflr r0
/* 800F2C60 000EDB60  90 01 00 24 */	stw r0, 0x24(r1)
/* 800F2C64 000EDB64  93 E1 00 1C */	stw r31, 0x1c(r1)
/* 800F2C68 000EDB68  93 C1 00 18 */	stw r30, 0x18(r1)
/* 800F2C6C 000EDB6C  93 A1 00 14 */	stw r29, 0x14(r1)
/* 800F2C70 000EDB70  7C 7D 1B 78 */	mr r29, r3
/* 800F2C74 000EDB74  4B FF EC 4D */	bl OSDisableInterrupts
/* 800F2C78 000EDB78  7C 7F 1B 78 */	mr r31, r3
/* 800F2C7C 000EDB7C  48 00 14 DD */	bl OSGetCurrentThread
/* 800F2C80 000EDB80  80 1D 00 08 */	lwz r0, 8(r29)
/* 800F2C84 000EDB84  7C 7E 1B 78 */	mr r30, r3
/* 800F2C88 000EDB88  7C 00 18 40 */	cmplw r0, r3
/* 800F2C8C 000EDB8C  40 82 00 70 */	bne lbl_800F2CFC
/* 800F2C90 000EDB90  80 1D 00 0C */	lwz r0, 0xc(r29)
/* 800F2C94 000EDB94  34 00 FF FF */	addic. r0, r0, -1
/* 800F2C98 000EDB98  90 1D 00 0C */	stw r0, 0xc(r29)
/* 800F2C9C 000EDB9C  40 82 00 60 */	bne lbl_800F2CFC
/* 800F2CA0 000EDBA0  80 9D 00 10 */	lwz r4, 0x10(r29)
/* 800F2CA4 000EDBA4  80 BD 00 14 */	lwz r5, 0x14(r29)
/* 800F2CA8 000EDBA8  2C 04 00 00 */	cmpwi r4, 0
/* 800F2CAC 000EDBAC  40 82 00 0C */	bne lbl_800F2CB8
/* 800F2CB0 000EDBB0  90 A3 02 F8 */	stw r5, 0x2f8(r3)
/* 800F2CB4 000EDBB4  48 00 00 08 */	b lbl_800F2CBC
lbl_800F2CB8:
/* 800F2CB8 000EDBB8  90 A4 00 14 */	stw r5, 0x14(r4)
lbl_800F2CBC:
/* 800F2CBC 000EDBBC  2C 05 00 00 */	cmpwi r5, 0
/* 800F2CC0 000EDBC0  40 82 00 0C */	bne lbl_800F2CCC
/* 800F2CC4 000EDBC4  90 83 02 F4 */	stw r4, 0x2f4(r3)
/* 800F2CC8 000EDBC8  48 00 00 08 */	b lbl_800F2CD0
lbl_800F2CCC:
/* 800F2CCC 000EDBCC  90 85 00 10 */	stw r4, 0x10(r5)
lbl_800F2CD0:
/* 800F2CD0 000EDBD0  38 00 00 00 */	li r0, 0
/* 800F2CD4 000EDBD4  90 1D 00 08 */	stw r0, 8(r29)
/* 800F2CD8 000EDBD8  80 83 02 D0 */	lwz r4, 0x2d0(r3)
/* 800F2CDC 000EDBDC  80 03 02 D4 */	lwz r0, 0x2d4(r3)
/* 800F2CE0 000EDBE0  7C 04 00 00 */	cmpw r4, r0
/* 800F2CE4 000EDBE4  40 80 00 10 */	bge lbl_800F2CF4
/* 800F2CE8 000EDBE8  7F C3 F3 78 */	mr r3, r30
/* 800F2CEC 000EDBEC  48 00 15 85 */	bl func_800F4270
/* 800F2CF0 000EDBF0  90 7E 02 D0 */	stw r3, 0x2d0(r30)
lbl_800F2CF4:
/* 800F2CF4 000EDBF4  7F A3 EB 78 */	mr r3, r29
/* 800F2CF8 000EDBF8  48 00 26 55 */	bl OSWakeupThread
lbl_800F2CFC:
/* 800F2CFC 000EDBFC  7F E3 FB 78 */	mr r3, r31
/* 800F2D00 000EDC00  4B FF EB E9 */	bl OSRestoreInterrupts
/* 800F2D04 000EDC04  80 01 00 24 */	lwz r0, 0x24(r1)
/* 800F2D08 000EDC08  83 E1 00 1C */	lwz r31, 0x1c(r1)
/* 800F2D0C 000EDC0C  83 C1 00 18 */	lwz r30, 0x18(r1)
/* 800F2D10 000EDC10  83 A1 00 14 */	lwz r29, 0x14(r1)
/* 800F2D14 000EDC14  7C 08 03 A6 */	mtlr r0
/* 800F2D18 000EDC18  38 21 00 20 */	addi r1, r1, 0x20
/* 800F2D1C 000EDC1C  4E 80 00 20 */	blr 

.global __OSUnlockAllMutex
__OSUnlockAllMutex:
/* 800F2D20 000EDC20  94 21 FF F0 */	stwu r1, -0x10(r1)
/* 800F2D24 000EDC24  7C 08 02 A6 */	mflr r0
/* 800F2D28 000EDC28  90 01 00 14 */	stw r0, 0x14(r1)
/* 800F2D2C 000EDC2C  93 E1 00 0C */	stw r31, 0xc(r1)
/* 800F2D30 000EDC30  3B E0 00 00 */	li r31, 0
/* 800F2D34 000EDC34  93 C1 00 08 */	stw r30, 8(r1)
/* 800F2D38 000EDC38  7C 7E 1B 78 */	mr r30, r3
/* 800F2D3C 000EDC3C  48 00 00 2C */	b lbl_800F2D68
lbl_800F2D40:
/* 800F2D40 000EDC40  80 83 00 10 */	lwz r4, 0x10(r3)
/* 800F2D44 000EDC44  2C 04 00 00 */	cmpwi r4, 0
/* 800F2D48 000EDC48  40 82 00 0C */	bne lbl_800F2D54
/* 800F2D4C 000EDC4C  93 FE 02 F8 */	stw r31, 0x2f8(r30)
/* 800F2D50 000EDC50  48 00 00 08 */	b lbl_800F2D58
lbl_800F2D54:
/* 800F2D54 000EDC54  93 E4 00 14 */	stw r31, 0x14(r4)
lbl_800F2D58:
/* 800F2D58 000EDC58  90 9E 02 F4 */	stw r4, 0x2f4(r30)
/* 800F2D5C 000EDC5C  93 E3 00 0C */	stw r31, 0xc(r3)
/* 800F2D60 000EDC60  93 E3 00 08 */	stw r31, 8(r3)
/* 800F2D64 000EDC64  48 00 25 E9 */	bl OSWakeupThread
lbl_800F2D68:
/* 800F2D68 000EDC68  80 7E 02 F4 */	lwz r3, 0x2f4(r30)
/* 800F2D6C 000EDC6C  2C 03 00 00 */	cmpwi r3, 0
/* 800F2D70 000EDC70  40 82 FF D0 */	bne lbl_800F2D40
/* 800F2D74 000EDC74  80 01 00 14 */	lwz r0, 0x14(r1)
/* 800F2D78 000EDC78  83 E1 00 0C */	lwz r31, 0xc(r1)
/* 800F2D7C 000EDC7C  83 C1 00 08 */	lwz r30, 8(r1)
/* 800F2D80 000EDC80  7C 08 03 A6 */	mtlr r0
/* 800F2D84 000EDC84  38 21 00 10 */	addi r1, r1, 0x10
/* 800F2D88 000EDC88  4E 80 00 20 */	blr 

.global OSTryLockMutex
OSTryLockMutex:
/* 800F2D8C 000EDC8C  94 21 FF E0 */	stwu r1, -0x20(r1)
/* 800F2D90 000EDC90  7C 08 02 A6 */	mflr r0
/* 800F2D94 000EDC94  90 01 00 24 */	stw r0, 0x24(r1)
/* 800F2D98 000EDC98  93 E1 00 1C */	stw r31, 0x1c(r1)
/* 800F2D9C 000EDC9C  93 C1 00 18 */	stw r30, 0x18(r1)
/* 800F2DA0 000EDCA0  93 A1 00 14 */	stw r29, 0x14(r1)
/* 800F2DA4 000EDCA4  7C 7D 1B 78 */	mr r29, r3
/* 800F2DA8 000EDCA8  4B FF EB 19 */	bl OSDisableInterrupts
/* 800F2DAC 000EDCAC  7C 7F 1B 78 */	mr r31, r3
/* 800F2DB0 000EDCB0  48 00 13 A9 */	bl OSGetCurrentThread
/* 800F2DB4 000EDCB4  80 1D 00 08 */	lwz r0, 8(r29)
/* 800F2DB8 000EDCB8  2C 00 00 00 */	cmpwi r0, 0
/* 800F2DBC 000EDCBC  40 82 00 44 */	bne lbl_800F2E00
/* 800F2DC0 000EDCC0  80 9D 00 0C */	lwz r4, 0xc(r29)
/* 800F2DC4 000EDCC4  90 7D 00 08 */	stw r3, 8(r29)
/* 800F2DC8 000EDCC8  38 04 00 01 */	addi r0, r4, 1
/* 800F2DCC 000EDCCC  90 1D 00 0C */	stw r0, 0xc(r29)
/* 800F2DD0 000EDCD0  80 83 02 F8 */	lwz r4, 0x2f8(r3)
/* 800F2DD4 000EDCD4  2C 04 00 00 */	cmpwi r4, 0
/* 800F2DD8 000EDCD8  40 82 00 0C */	bne lbl_800F2DE4
/* 800F2DDC 000EDCDC  93 A3 02 F4 */	stw r29, 0x2f4(r3)
/* 800F2DE0 000EDCE0  48 00 00 08 */	b lbl_800F2DE8
lbl_800F2DE4:
/* 800F2DE4 000EDCE4  93 A4 00 10 */	stw r29, 0x10(r4)
lbl_800F2DE8:
/* 800F2DE8 000EDCE8  38 00 00 00 */	li r0, 0
/* 800F2DEC 000EDCEC  90 9D 00 14 */	stw r4, 0x14(r29)
/* 800F2DF0 000EDCF0  3B C0 00 01 */	li r30, 1
/* 800F2DF4 000EDCF4  90 1D 00 10 */	stw r0, 0x10(r29)
/* 800F2DF8 000EDCF8  93 A3 02 F8 */	stw r29, 0x2f8(r3)
/* 800F2DFC 000EDCFC  48 00 00 24 */	b lbl_800F2E20
lbl_800F2E00:
/* 800F2E00 000EDD00  7C 00 18 40 */	cmplw r0, r3
/* 800F2E04 000EDD04  40 82 00 18 */	bne lbl_800F2E1C
/* 800F2E08 000EDD08  80 7D 00 0C */	lwz r3, 0xc(r29)
/* 800F2E0C 000EDD0C  3B C0 00 01 */	li r30, 1
/* 800F2E10 000EDD10  38 03 00 01 */	addi r0, r3, 1
/* 800F2E14 000EDD14  90 1D 00 0C */	stw r0, 0xc(r29)
/* 800F2E18 000EDD18  48 00 00 08 */	b lbl_800F2E20
lbl_800F2E1C:
/* 800F2E1C 000EDD1C  3B C0 00 00 */	li r30, 0
lbl_800F2E20:
/* 800F2E20 000EDD20  7F E3 FB 78 */	mr r3, r31
/* 800F2E24 000EDD24  4B FF EA C5 */	bl OSRestoreInterrupts
/* 800F2E28 000EDD28  7F C3 F3 78 */	mr r3, r30
/* 800F2E2C 000EDD2C  83 E1 00 1C */	lwz r31, 0x1c(r1)
/* 800F2E30 000EDD30  83 C1 00 18 */	lwz r30, 0x18(r1)
/* 800F2E34 000EDD34  83 A1 00 14 */	lwz r29, 0x14(r1)
/* 800F2E38 000EDD38  80 01 00 24 */	lwz r0, 0x24(r1)
/* 800F2E3C 000EDD3C  7C 08 03 A6 */	mtlr r0
/* 800F2E40 000EDD40  38 21 00 20 */	addi r1, r1, 0x20
/* 800F2E44 000EDD44  4E 80 00 20 */	blr 
